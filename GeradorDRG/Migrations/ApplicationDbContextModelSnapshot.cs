// <auto-generated />
using GeradorDRG.Data;
using GeradorDRG.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace GeradorDRG.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn)
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452");

            modelBuilder.Entity("GeradorDRG.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("GeradorDRG.Models.Banco", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.Property<bool>("Padrao");

                    b.Property<int>("Provider");

                    b.HasKey("Id");

                    b.ToTable("Banco");
                });

            modelBuilder.Entity("GeradorDRG.Models.Configuracao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BancoId");

                    b.Property<string>("BancoSID");

                    b.Property<string>("BancoSenha");

                    b.Property<string>("BancoURL");

                    b.Property<string>("BancoUsuario");

                    b.Property<string>("CodDRG");

                    b.Property<string>("NomeDRG");

                    b.Property<int>("SistemaId");

                    b.Property<bool>("UtilizaWebService");

                    b.Property<string>("WebServiceSenha");

                    b.Property<string>("WebServiceUsuario");

                    b.HasKey("Id");

                    b.HasIndex("BancoId");

                    b.HasIndex("SistemaId");

                    b.ToTable("Configuracao");
                });

            modelBuilder.Entity("GeradorDRG.Models.MotivoAlta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CodigoMotivo")
                        .IsRequired();

                    b.Property<int>("ConfiguracaoId");

                    b.Property<string>("DsMotivoAlta");

                    b.Property<string>("TipoDRG");

                    b.HasKey("Id");

                    b.HasIndex("ConfiguracaoId");

                    b.ToTable("MotivoAlta");
                });

            modelBuilder.Entity("GeradorDRG.Models.PacienteTeste", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CodPaciente");

                    b.Property<int>("ConfiguracaoId");

                    b.Property<string>("NomePaciente");

                    b.HasKey("Id");

                    b.HasIndex("ConfiguracaoId");

                    b.ToTable("PacienteTeste");
                });

            modelBuilder.Entity("GeradorDRG.Models.PrestadorTeste", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CodPrestador");

                    b.Property<int>("ConfiguracaoId");

                    b.Property<string>("NomePrestador");

                    b.HasKey("Id");

                    b.HasIndex("ConfiguracaoId");

                    b.ToTable("PrestadorTeste");
                });

            modelBuilder.Entity("GeradorDRG.Models.Sistema", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.Property<bool>("Padrao");

                    b.HasKey("Id");

                    b.ToTable("Sistema");
                });

            modelBuilder.Entity("GeradorDRG.Models.SistemaBanco", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BancoId");

                    b.Property<bool>("Padrao");

                    b.Property<int>("SistemaId");

                    b.HasKey("Id");

                    b.HasIndex("BancoId");

                    b.HasIndex("SistemaId");

                    b.ToTable("SistemaBanco");
                });

            modelBuilder.Entity("GeradorDRG.Models.TipoInternacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CodigoTipo")
                        .IsRequired();

                    b.Property<int>("ConfiguracaoId");

                    b.Property<string>("Tipo");

                    b.Property<string>("TipoDRG");

                    b.HasKey("Id");

                    b.HasIndex("ConfiguracaoId");

                    b.ToTable("TipoInterncao");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("GeradorDRG.Models.Configuracao", b =>
                {
                    b.HasOne("GeradorDRG.Models.Banco", "Banco")
                        .WithMany()
                        .HasForeignKey("BancoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GeradorDRG.Models.Sistema", "Sistema")
                        .WithMany()
                        .HasForeignKey("SistemaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GeradorDRG.Models.MotivoAlta", b =>
                {
                    b.HasOne("GeradorDRG.Models.Configuracao", "Configuracao")
                        .WithMany("MotivosAlta")
                        .HasForeignKey("ConfiguracaoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GeradorDRG.Models.PacienteTeste", b =>
                {
                    b.HasOne("GeradorDRG.Models.Configuracao", "Configuracao")
                        .WithMany("Pacientes")
                        .HasForeignKey("ConfiguracaoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GeradorDRG.Models.PrestadorTeste", b =>
                {
                    b.HasOne("GeradorDRG.Models.Configuracao", "Configuracao")
                        .WithMany("Prestadores")
                        .HasForeignKey("ConfiguracaoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GeradorDRG.Models.SistemaBanco", b =>
                {
                    b.HasOne("GeradorDRG.Models.Banco", "Banco")
                        .WithMany("SistemaBanco")
                        .HasForeignKey("BancoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GeradorDRG.Models.Sistema", "Sistema")
                        .WithMany("SistemaBanco")
                        .HasForeignKey("SistemaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GeradorDRG.Models.TipoInternacao", b =>
                {
                    b.HasOne("GeradorDRG.Models.Configuracao", "Configuracao")
                        .WithMany("TiposInternacao")
                        .HasForeignKey("ConfiguracaoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GeradorDRG.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GeradorDRG.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GeradorDRG.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GeradorDRG.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
